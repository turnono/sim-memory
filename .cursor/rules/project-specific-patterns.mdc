---
description:
globs:
alwaysApply: false
---
# Taajirah Project Specific Patterns

## Project Context
Taajirah is an AI life guidance system that helps users navigate their daily lives while actively evolving to become better at helping them specifically. The system acts as a "simulation" of life itself, providing personalized guidance.

## Core Concepts

### Life Guidance Philosophy
- **Meta-cognitive approach**: System improves itself for each user
- **Simulation metaphor**: Life itself is the simulation being guided through
- **Co-creative partnership**: User and AI build the perfect assistant together
- **Personalized evolution**: System learns and adapts to individual users

### User Context Management
Located in [sim_guide/sub_agents/user_context_manager/](mdc:sim_guide/sub_agents/user_context_manager/):
- **Memory Management**: Store and retrieve user's life context and experiences
- **Session Continuity**: Maintain conversation state across interactions
- **Preference Learning**: Automatically detect and store user preferences
- **Personalization**: Generate context-aware guidance

### Business Strategy Integration
Located in [sim_guide/sub_agents/business_strategist/](mdc:sim_guide/sub_agents/business_strategist/):
- **Hierarchical Strategy**: MBA-level business advice with specialized sub-agents
- **Context-aware**: Integrates user's business context and personal style
- **Delegation Pattern**: Routes to marketing, finance, operations, product, or growth specialists

## Domain-Specific Services

### RAG Memory Service
File: [sim_guide/sub_agents/user_context_manager/services/rag_memory_service.py](mdc:sim_guide/sub_agents/user_context_manager/services/rag_memory_service.py)
- Vertex AI RAG corpus integration
- Hybrid search (semantic + keyword)
- Memory persistence across sessions
- Cost optimization flags

### User Preference System
Files: [sim_guide/sub_agents/user_context_manager/services/user_service.py](mdc:sim_guide/sub_agents/user_context_manager/services/user_service.py) and [sim_guide/sub_agents/user_context_manager/services/user_models.py](mdc:sim_guide/sub_agents/user_context_manager/services/user_models.py)
- Automatic preference detection from messages
- Life experience levels: young, experienced, expert
- Communication styles: step-by-step, practical, brief, motivational
- Life areas: career, relationships, health, personal_growth, financial, learning

### Session Management
File: [sim_guide/sub_agents/user_context_manager/services/session_service.py](mdc:sim_guide/sub_agents/user_context_manager/services/session_service.py)
- Google Vertex AI Reasoning Engine integration
- Session state persistence
- Multi-user session isolation
- Conversation continuity

## Key Data Models

### UserPreferences
```python
@dataclass
class UserPreferences:
    user_name: Optional[str] = None
    life_experience_level: LifeExperienceLevel = LifeExperienceLevel.YOUNG
    communication_style: CommunicationStyle = CommunicationStyle.STEP_BY_STEP
    focus_life_areas: List[LifeArea] = field(default_factory=list)
    preferred_tools: List[str] = field(default_factory=list)
    core_values: List[str] = field(default_factory=list)
    learning_style: Optional[str] = None
```

### Business Strategy Context
The business strategist uses context-passing architecture:
- Business context (company stage, industry, goals)
- User style (decision-making approach, risk tolerance)
- Specific business questions or challenges

## Tool Patterns

### Memory Tools Pattern
```python
# ADK memory integration
@tool
async def load_life_guidance_memory(query: str, tool_context: ToolContext) -> str:
    """Load relevant memories for life guidance"""
    # Implementation uses ADK's built-in memory functions
```

### Preference Tools Pattern
```python
@tool
def get_user_preferences(tool_context: ToolContext) -> str:
    """Get current user preferences"""
    # Uses session state to retrieve preferences
    
@tool
def set_user_preference(preference_name: str, preference_value: str, tool_context: ToolContext) -> str:
    """Set a specific user preference"""
    # Updates session state and triggers persistence
```

### Session Tools Pattern
```python
@tool
def analyze_session_context() -> str:
    """Analyze current session context"""
    # Provides session continuity information
    
@tool  
def get_conversation_continuity_hints() -> str:
    """Get hints for conversation continuity"""
    # Helps maintain conversational flow
```

## Integration Patterns

### Google Cloud Integration
- **Vertex AI RAG**: For semantic memory search
- **Reasoning Engine**: For session management
- **Cloud Storage**: For document and memory persistence
- **Project Configuration**: Via environment variables in [.env](mdc:.env)

### ADK Integration
- **Agent Creation**: Using `google.adk.Agent`
- **Tool Registration**: Using `@tool` decorator
- **Memory Operations**: Using ADK's built-in memory functions
- **Model Configuration**: Consistent `gemini-2.0-flash` across agents

## Prompt Engineering Patterns

### Root Agent Prompt
File: [sim_guide/prompts.py](mdc:sim_guide/prompts.py)
- Meta-cognitive identity
- Coordination focus (no direct tools)
- Delegation examples with specific sub-agent calls
- Proactive behavior guidelines

### Sub-Agent Prompts
Each in respective `prompt.py` files:
- Domain-specific expertise
- Tool-specific instructions
- Context handling guidelines
- Integration with user preferences

## Evaluation and Testing

### Evaluation Categories
Located in [evals/](mdc:evals/):
- **Memory Behavior**: [evals/memory_behavior_evals.py](mdc:evals/memory_behavior_evals.py)
- **Business Strategy**: [evals/business_strategist_evals.py](mdc:evals/business_strategist_evals.py)
- **User Preferences**: [evals/preference_evals.py](mdc:evals/preference_evals.py)
- **Agent Performance**: [evals/agent_evals.py](mdc:evals/agent_evals.py)
- **System Integration**: [test_refactored_system.py](mdc:test_refactored_system.py)

### Testing Conventions
- Use `python -m evals.test_name` for module testing
- Mock contexts for unit testing: `MockToolContext`, `MockCallbackContext`
- Integration tests verify end-to-end functionality
- Performance tests check response times and scalability

## Configuration Patterns

### Environment Configuration
Required variables in [.env](mdc:.env):
```
PROJECT_ID=your-gcp-project
LOCATION=us-central1
REASONING_ENGINE_ID=your-reasoning-engine-id
```

### Cost Optimization
- RAG cost optimization flags
- Selective memory operations
- Configurable search limits
- Hybrid search fallbacks

## Development Guidelines

### Adding New Life Areas
1. Update `LifeArea` enum in [sim_guide/sub_agents/user_context_manager/services/user_models.py](mdc:sim_guide/sub_agents/user_context_manager/services/user_models.py)
2. Update preference detection in user service
3. Add corresponding tools or adjust existing ones
4. Update evaluation tests

### Extending Business Strategy
1. Add new sub-strategist in business strategist prompt
2. Implement delegation logic in business strategy tools
3. Add domain-specific context handling
4. Update business strategist evaluations

### Memory System Extensions
1. Extend RAG memory service for new memory types
2. Add corresponding memory tools
3. Update session management if needed
4. Add memory-specific evaluations

## Code Quality Standards

### Documentation Requirements
- All tools must have clear docstrings
- Services should document their integration points
- Agents should have comprehensive prompt documentation
- Configuration changes should be documented

### Error Handling
- Tools should handle and log errors gracefully
- Services should provide fallback mechanisms
- Agents should continue functioning with partial failures
- User-facing errors should be helpful and actionable

### Performance Considerations
- Memory operations should be optimized for user experience
- Business strategy calls should be efficient
- Session state should be managed carefully
- Evaluation tests should run in reasonable time
